generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Inventory {
  id              Int       @id @default(autoincrement())
  itemName        String
  category        String
  stockLevel      Int
  reorderLevel    Int
  itemDescription String?
  careHomeId      Int
  careHome        CareHome  @relation(fields: [careHomeId], references: [id])
  donations       Donation[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("inventory")
}

model CareHome {
  id          Int         @id @default(autoincrement())
  registrationNo    String      @unique
  name        String
  address     String
  phone       String
  email       String
  category          CareHomeCategory
  inventory   Inventory[]
  needs       Need[]
  mealdonation MealDonationSlot[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("care_homes")
}

enum CareHomeCategory {
  CHILDREN
  ADULTS
  SENIORS
  DISABLED
  GENERAL
}

model Donor {
  id          Int        @id @default(autoincrement())
  name        String
  email       String
  phone       String
  address     String?
  donations   Donation[]
  mealdonation MealDonationSlot[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("donors")
}

model Donation {
  id          Int      @id @default(autoincrement())
  quantity    Int
  date        DateTime @default(now())
  status      String   @default("pending")
  notes       String?
  donorId     Int
  donor       Donor    @relation(fields: [donorId], references: [id])
  inventoryId Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  @@map("donations")
}

model Need {
  id               Int      @id @default(autoincrement())
  itemName         String
  requiredQuantity Int
  currentQuantity  Int
  category         String
  urgencyLevel     String   @db.VarChar(10)
  careHomeId       Int
  careHome         CareHome @relation(fields: [careHomeId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("needs")
}

model MealDonationSlot {
  id          Int       @id @default(autoincrement())
  date        DateTime
  mealType    MealType
  status      SlotStatus @default(Available)
  careHomeId  Int
  careHome    CareHome  @relation(fields: [careHomeId], references: [id])
  donorId     Int?
  donor       Donor?    @relation(fields: [donorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([date, mealType, careHomeId])
}

enum MealType {
  Breakfast
  Lunch
  Dinner
}

enum SlotStatus {
  Available
  Booked
  Completed
}